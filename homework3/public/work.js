var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    //Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.loginID = Data.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Known People</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit= {this.handleCommentSubmit}/>
      </div>
    );
  }
});


var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.firstname + " " +comment.lastname} key={comment.loginID}>
          {comment.startDate}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function(){
    return {firstname: '', lastname: '', startDate: ''};
  },
  handlefirstnameChange: function(e) {
    this.setState({firstname: e.target.value});
  },
  handlelastnameChange: function(e) {
    this.setState({lastname: e.target.value})
  },
  handlestartDateChange: function(e) {
    this.setState({startDate: e.target.value})
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var firstname = this.state.firstname.trim();
    var lastname = this.state.lastname.trim();
    var startDate = this.state.startDate.trim();
    if(!firstname || !lastname || !startDate){
      return;
    }
    this.props.onCommentSubmit({firstname: firstname, lastname: lastname, startDate: startDate});
    this.setState({firstname: '', lastname: '', startDate: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit = {this.handleSubmit}>
        <input
          type= "text"
          placeholder= "First Name"
          value = {this.state.firstname}
          onChange={this.handlefirstnameChange}
        />
        <input
          type= "text"
          placeholder= "Last Name"
          value = {this.state.lastname}
          onChange={this.handlelastnameChange}
        />
        <input
          type = "text"
          placeholder = "Start Date"
          value = {this.state.startDate}
          onChange={this.handlestartDateChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

// tutorial4.js
var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    console.log(this.props.author);
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/people" pollInterval= {2000} />,
  document.getElementById('content')
);
